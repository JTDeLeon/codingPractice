// Exercise 1 : Sum of range

function range (start, end, step){
	var array = [];

	//Checks for step and defaults to 1 if not set
	if(step==undefined){
		step = 1;
	}
	
	if(step>0){
		//Add in array for positive
		for (var a = start; a <= end; a+=step){
			//Pushes the element to array
			array.push(a);
		}
		return array;
	}
	else if(step<0){
		//Add in array for negatives

		//Alternate Solution: 
			// var b = start;
			// while(b >= end){
			// 	// array.push(b);
			// 	console.log(b);
			// 	b=b+step;
			// }

		//Note: Have to add step because step is negative already!! 
		for (var a = start; a >= end; a+=step){
			//Pushes the element to array
			array.push(a);
		}
		return array;

	}
}

function sumOfArray(array){
	//initializes our total var
	var total = 0;
	//sums up the array elements
	for(var i = 0; i < array.length; i++){
		total += array[i];
	}
	return total;
}


//Reverse an array challenge: 

function reverseArray (array){
    var newArray = [];
    // will iterate array
    var counter = 0;

    for(var i = array.length-1; i>=0; i--){
        newArray[counter] = array[i];
        counter += 1;
    }
    return newArray;
};

 

function reverseArrayInPlace(array){

	this.array = reverseArray(array);
	//Creates a public array that changes the array to reverse order
};


//List Function Challenge: 

//Create the List when given an array
function arrayToList(array){
	var finalValue = array[array.length-1];
	//Takes away the first index value and sets to newValue
	var newValue = array.shift();

	if(newValue!=undefined){
		//Creates List
		var list = {};
		//Assigns newValue to object
		list.value = newValue;
		//Checks to see if last property will be set to null or use recursion
		if(newValue == finalValue){
			list.rest = null;
		}else{
			list.rest = arrayToList(array);
		}
	}
	return list;
}

	



//Produces an array from the list
function listToArray(list){
	var newArray = [];
	//Traverses into the object link
	for(var node = list; node; node = node.rest){
		newArray.push(node.value);
	}
	return newArray;
}


//Prepend : takes an element and a list and creates a new list that adds the element to the front of the input list
function prepend (listObject, element) {
	var newList = {
		value:element,
		rest:listObject
	}
	return newList;
	//return {value:element, rest:listObject};

}


// nth : returns the element at the given position in the list, or undefined. 
function nth(list, element){
	//If the list is empty with no values, then return undefined
	if(!list)
		return undefined;
	//If the index is zero, return the current list's value
	else if(element == 0)
		return list.value;
	/*Otherwise we want to move the list pointer forward by recursion with the 
	next level in the list with element-1 counting down until we reach zero, at that 
	point is when we will have found our object we want to pull the value from*/
	else 
		return nth(list.rest, element-1);

}

/* Out put data For List Functions*/ /*
console.log(arrayToList([10, 20]));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(listToArray(arrayToList([10, 20, 30])));
// → [10, 20, 30]
console.log(prepend(prepend(null,20),10));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(nth(arrayToList([10, 20, 30]), 1));
// → 20
*/

/*Deep Comparison Example that takes two values and returns true 
only if they are the same value or are objects with the same properties
 whose values are also equal when compared with a recursive call to deepEqual.*/

 function deepEqual(value1, value2){
 	//Handles normal data types
 	if(value1 === value2){
 		return true;
 	}
 	//Do Deep Comparison
 	else if(typeof(value1)== 'object' && typeof(value2) == 'object'){
 		// console.log("Made it within object comparison");
 		//Handles 'null' value
 		if(value1 == null && value2 == null){
 			return true;
 		}
 		//Handles Object Comparison
 		else{
 			var array1 = Object.getOwnPropertyNames(value1);
 			var array2 = Object.getOwnPropertyNames(value2);

 			for(var i = 0; i<array1.length; i++){
 				//For Loop Again
 				// console.log("var I = "+i);
 				for(var x = 0; x<array2.length; x++){
 					// console.log("var x = "+x);
 					// console.log("Array 1 value = "+array1[i]+" and the type of the variable is "+typeof(array1[i]));
 					// console.log("Array 2 value = "+array2[x]+" and the type of the variable is "+typeof(array2[x]));
 					if(array1[i] === array2[x]){
 						//Matching Property Found
 						// console.log("match found");
 						// console.log("first value = "+value1[array1[i]]);
 						// console.log("second value = "+value2[array2[x]]);
 						
 						//IF statement where I am comparing the nested object scenario.
 						if(typeof(value1[array1[i]]) ==='object' && typeof(value2[array2[x]]) === 'object'){
 							//The values of the matching property is an object on both values
 							var checkIfTrue = deepEqual(value1[array1[i]],value2[array2[x]]);
 							if(checkIfTrue === true){
 								return true;
 							}
 							else{
 								return false;
 							}
 						}

 						else if(value1[array1[i]] === value2[array2[x]] ){
 							// console.log("match found "+value1[array1[i]]+" and "+value2[array2[x]]);
 							// console.log("match found but the types are "+typeof(value1[array1[i]])+" and "+typeof(value2[array2[x]]));
 							return true;
 						}
 						else{
 							//console.log("false is being returned here");
 							return false;
 						}

 					}
 					else{
 						return false;
 					}
 				}
 				
			
			}
 		}

 	}
 	else{
 		return false;
 	}
 }

//Test for Deep Equal
/*console.log("Numbers Test");
console.log(deepEqual(2,3)+" and "+deepEqual(2,2));
//False & True


console.log("Null Test");
console.log(deepEqual(null,null));
//True
*/
//Object
console.log(deepEqual({"life":{"world":{"baby":true}}},{"life":{"world":{"baby":true}}}));
//True

//Object w/ Deep Links
